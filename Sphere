#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <windows.h>

#define N 10
#define M 34

int main() {

	char place[N][M];
	int i, j;

	char temp[N][M];

	int SphereX = 7, SphereY = 15;
	int Direction, LastDirection;
	int LastBorderX = 7, LastBorderY = 15;
	int Angle;

	char key = 'q';
	int x = 8, y = 15;
	int Ox, Oy;

	bool Pressed = false;

	Direction = 1;
	Angle = Direction;

	for (i = 1; i < N / 2; i++) {

		for (j = 1; j < M - 2; j++) {

			temp[i][j] = '^';

		}

	}

	do {

		sprintf_s(place[0], "#-------------------------------#");  //Отрисовка верхней границы
		for (i = 1; i < N - 1; i++) {

			sprintf_s(place[i], "|                               |");  //Отрисовка боковых границ

		}
		sprintf_s(place[9], "                                ");  //Отрисовка нижней границы

		for (i = 2; i < N / 2; i += 2) {

			for (j = 2; j < M - 3; j += 2) {

				if (temp[i][j] == '^') {

					place[i][j] = '-';

				}
				else {

					place[i][j] = ' ';

				}

			}

		}

		for (i = 1; i < N / 2; i += 2) {

			for (j = 3; j < M - 3; j += 2) {

				if (temp[i][j] == '^') {

					place[i][j] = '-';

				}
				else {

					place[i][j] = ' ';

				}

			}

		}

		place[x][y] = '-';  //Ставим платформу по координатам внутри границ
		place[SphereX][SphereY] = '*';  //Ставим шарик по координатам внутри границ

		system("cls");  //Очистка консоли от предыдущего показанного кадра

		for (i = 0; i < N; i++) {  //Вывод в консоль: границы, платформа, шарик

			printf("%s\n", place[i]);

		}

		Ox = x;  //Координаты для отслежки попытки пересечь границу
		Oy = y;  //Координаты для отслежки попытки пересечь границу

		if (_getch() == 'a') {

			y--;

		}
		else if (_getch() == 'd') {

			y++;

		}
		else {

			continue;

		}

		if (place[x][y] == '|') {  //Постоянная проверка на пересечние границы

			x = Ox;  //Присвоение предыдущих координат в случае попытки пересечь границу
			y = Oy;

		}

		if (Direction == 1) {

			SphereX--;
			SphereY--;

			if ((place[SphereX][SphereY] == '-')) {

				temp[SphereX][SphereY] = ' ';

				SphereX = LastBorderX;
				SphereY = LastBorderY;

				SphereX++;
				SphereY--;

				Direction = 2;
				Angle = 1;

			}

			if (place[SphereX][SphereY] == '|') {

				SphereX = LastBorderX;
				SphereY = LastBorderY;

				SphereX--;
				SphereY++;

				Direction = 4;
				Angle = 1;

			}

			if ((place[SphereX][SphereY] == '#')) {

				SphereX = LastBorderX;
				SphereY = LastBorderY;

				SphereX++;
				SphereY++;

				Direction = 3;
				Angle = 1;

			}

		}
		else if (Direction == 2) {

			SphereX++;
			SphereY--;

			if ((place[SphereX][SphereY] == '-') && (Angle == 3)) {

				SphereX = LastBorderX;
				SphereY = LastBorderY;

				SphereX--;
				SphereY--;

				Direction = 1;
				Angle = 2;

			}

			if ((place[SphereX][SphereY] == '-') && (Angle == 1)) {

				SphereX = LastBorderX;
				SphereY = LastBorderY;

				SphereX--;
				SphereY--;

				Direction = 1;
				Angle = 2;

			}

			if ((place[SphereX][SphereY] == '|') && (Angle == 1)) {

				SphereX = LastBorderX;
				SphereY = LastBorderY;

				SphereX++;
				SphereY++;

				Direction = 3;
				Angle = 2;

			}

		}
		else if (Direction == 3) {

			SphereX++;
			SphereY++;

			if ((place[SphereX][SphereY] == '-') && (Angle == 1)) {

				SphereX = LastBorderX;
				SphereY = LastBorderY;

				SphereX--;
				SphereY++;

				Direction = 4;
				Angle = 3;

			}

			if ((place[SphereX][SphereY] == '-') && (Angle == 2)) {

				SphereX = LastBorderX;
				SphereY = LastBorderY;

				SphereX--;
				SphereY++;

				Direction = 4;
				Angle = 3;

			}

			if ((place[SphereX][SphereY] == '-') && (Angle == 4)) {

				SphereX = LastBorderX;
				SphereY = LastBorderY;

				SphereX--;
				SphereY++;

				Direction = 4;
				Angle = 3;

			}

			if ((place[SphereX][SphereY] == '|') && (Angle == 4)) {

				SphereX = LastBorderX;
				SphereY = LastBorderY;

				SphereX++;
				SphereY--;

				Direction = 2;
				Angle = 3;

			}

		}
		else if (Direction == 4) {

			SphereX--;
			SphereY++;

			if ((place[SphereX][SphereY] == '-') && (Angle == 3)) {

				temp[SphereX][SphereY] = ' ';

				SphereX = LastBorderX;
				SphereY = LastBorderY;

				SphereX++;
				SphereY++;

				Direction = 3;
				Angle = 4;

			}

			if ((place[SphereX][SphereY] == '-') && (Angle == 1)) {

				temp[SphereX][SphereY] = ' ';

				SphereX = LastBorderX;
				SphereY = LastBorderY;

				SphereX++;
				SphereY++;

				Direction = 3;
				Angle = 4;

			}

			if ((place[SphereX][SphereY] == '|') && (Angle == 3)) {

				SphereX = LastBorderX;
				SphereY = LastBorderY;

				SphereX--;
				SphereY--;

				Direction = 1;
				Angle = 4;

				if (place[SphereX][SphereY] == '-') {

					SphereX = LastBorderX;
					SphereY = LastBorderY;

				}

			}

			if ((place[SphereX][SphereY] == '|') && (Angle == 1)) {

				SphereX = LastBorderX;
				SphereY = LastBorderY;

				SphereX++;
				SphereY++;

				Direction = 3;
				Angle = 4;

				if (place[SphereX][SphereY] == '-') {

					SphereX = LastBorderX;
					SphereY = LastBorderY;

				}

			}

			if ((place[SphereX][SphereY] == '#')) {

				SphereX = LastBorderX;
				SphereY = LastBorderY;

				SphereX++;
				SphereY++;

				Direction = 3;
				Angle = 4;

			}

		}

		LastBorderX = SphereX;
		LastBorderY = SphereY;

		int c = 0;

		for (i = 1; i < N / 2; i++) {

			for (j = 1; j < M - 2; j++) {

				if (temp[i][j] == ' ') {

					c++;

				}

			}

		}

		if (c == 58) {

			printf("\nYou have won!\n\n");
			system("pause");

		}

		c = 0;

		Sleep(20);

	} while (SphereX != 9);  //Кнопка выхода из игры

	printf("You have lose!");

}

